# -*- coding: utf-8 -*-
"""
Created on Sun Jan 28 14:08:31 2018

@author: loulan
"""

from tkinter import *
from tkinter.ttk import *
from tkinter.messagebox import *
from PIL import Image,ImageTk
import random
import numpy as np
import scipy.misc as sm  # 图像处理
import os     


# 生成随机数，显示随机测试图像
def randoms():    
    file_num = random.randrange(1,41)
    return file_num

# 版本信息
def version():
    showinfo(title = "版本",message ="Version-1.0.0" )

# 说明
def messages():
    showinfo(title = "说明",message = "特征向量取前19个，训练与测试比 9：1 .")
    
# 操作说明
def operator():
    showinfo(title = "操作说明",message = "<-------请按照操作提示操作------->\
                                         1--> 点击 随机图像 随机选择一张图像\
                                         2--> 点击 识别相似图像 展示相似的前四张图像")

# 程序介绍
def introduce():
    showinfo(title = "介绍",message = """
    人脸识别小项目:
    数据集： 数据集是网络共享资源，人脸数据库，共40个人，每人10张图片，共400张图片
    训练测试： 程序测试采用360张图片作为训练，用40张图片作为测试，识别率为95%
    算法： 特征提取采用PCA算法、用KNN取距离最小的前四张图片作为相似图片。""")

# 主菜单
def menu_bar():
    global root
    menubar = Menu(root)   
    intro_menu = Menu(menubar)
    intro_menu.add_command(label = "说明",command = messages)
    intro_menu.add_command(label = "介绍",command = introduce)
    menubar.add_cascade(label = "  介绍",menu = intro_menu)
    
    about_menu = Menu(menubar)
    about_menu.add_command(label = "版本",command = version)
    about_menu.add_command(label = "操作",command = operator)
    menubar.add_cascade(label = "  关于",menu = about_menu)
    root["menu"] = menubar
    
# gui 主界面
def main_gui():
    global root
    menu_bar()
    label1 = Label(root,text = "  随机识别相似图像")
    label1.grid(row = 0,column = 3,sticky = E)
    
#    label2 = Label(root,text = "相似图像合集:")
#    label2.grid(row = 0,column = 5,sticky = W)

    button_rand = Button(root,text = "随机识别",command = show_img)
    button_rand.grid(row = 1,column = 3,sticky = E)
    
#    button2 = Button(root,text = "点击查看",command = top_level)
#    button2.grid(row = 1,column = 5,sticky = W)
    
    show_img()     # 初始化显示随机图像和识别的相似图像
    root.mainloop()
    
def show_img():
    global file_num,path1
    file_num = randoms()
    path = path1 + r"\orl\s{}\10.pgm".format(file_num)
    img_open = Image.open(path)
    img_pgm = ImageTk.PhotoImage(img_open)
    label_pgm = Label(root,image = img_pgm)
    label_pgm.grid(row = 3,column = 3,sticky =E)
    show_img_final()
    root.mainloop()
    
def show_img_final():
    global file_num,path1
    index = face_recog(9,19,file_num-1)
    file_num1 = int(index[0]/9) + 1
    img_num1 = int(index[0]%9) + 1
    path = path1 + r"\orl\s{}\{}.pgm".format(file_num1,img_num1)
    img_open1 = Image.open(path)
    img_pgm1 = ImageTk.PhotoImage(img_open1)
    label_pgm1 = Label(root,image = img_pgm1)
    label_pgm1.grid(row = 3,column = 4,sticky =E)

    file_num2 = int(index[1]/9) + 1
    img_num2 = int(index[1]%9) + 1
    path = path1 + r"\orl\s{}\{}.pgm".format(file_num2,img_num2)
    img_open2 = Image.open(path)
    img_pgm2 = ImageTk.PhotoImage(img_open2)
    label_pgm2 = Label(root,image = img_pgm2)
    label_pgm2.grid(row = 3,column = 5,sticky =E)
    
    file_num3 = int(index[2]/9) + 1
    img_num3 = int(index[2]%9) + 1
    path = path1 + r"\orl\s{}\{}.pgm".format(file_num3,img_num3)
    img_open3 = Image.open(path)
    img_pgm3 = ImageTk.PhotoImage(img_open3)
    label_pgm3 = Label(root,image = img_pgm3)
    label_pgm3.grid(row = 3,column = 6,sticky =E)
    
    file_num4 = int(index[3]/9) + 1
    img_num4 = int(index[3]%9) + 1
    path = path1 + r"\orl\s{}\{}.pgm".format(file_num4,img_num4)
    img_open4 = Image.open(path)
    img_pgm4 = ImageTk.PhotoImage(img_open4)
    label_pgm4 = Label(root,image = img_pgm4)
    label_pgm4.grid(row = 3,column = 7,sticky =E)
    
    label_img()
    root.mainloop()

def label_img():
    global root
    label1 = Label(root,text = "       原图像")
    label1.grid(row = 4,column = 3,sticky = W)
    
    label2 = Label(root,text = "       相似图1")
    label2.grid(row = 4,column = 4,sticky = W)
    
    label3 = Label(root,text = "       相似图2")
    label3.grid(row = 4,column = 5,sticky = W)
    
    label4 = Label(root,text = "       相似图3")
    label4.grid(row = 4,column = 6,sticky = W)
    
    label5 = Label(root,text = "       相似图4")
    label5.grid(row = 4,column = 7,sticky = W)

#def top_level():
#    global root,top_level
#    top_level =Toplevel(root,width = 30,height = 30)
#    top_level.title("相似图像合集")
#    show_image_finals()
#      
#def show_image_finals():
#    global file_num,path1,top_level
#    index = face_recog(9,19,file_num-1)
#    file_num1 = int(index[0]/9) + 1
#    img_num1 = int(index[0]%9) + 1
#    path = path1 + r"\orl\s{}\{}.pgm".format(file_num1,img_num1)
#    img_open1 = Image.open(path)
#    img_pgm1 = ImageTk.PhotoImage(img_open1)
#    label_pgm1 = Label(top_level,image = img_pgm1)
#    label_pgm1.grid(row = 0,column = 1,sticky = E)
#
#    top_level.mainloop()

#  PCA 主成成分分析 选取特征值大的特征向量作为主成分
def pca(data,k):                   # data为训练样本   data 就是样本集  低维空间的维度m
    data = np.float32(np.mat(data)) 
    rows,cols = data.shape        # 训练样本的维度
    data_mean = np.mean(data,0)    #对列求均值          # 求出一个平均脸
    data_mean_all = np.tile(data_mean,(rows,1))      
    Z = data - data_mean_all                          # 对所有样本进行中心化 Z 是中心化之后的样本
    T1 = Z*Z.T                    #使用矩阵计算，所以前面mat   计算样本协方差矩阵
    D,V = np.linalg.eig(T1)       #特征值与特征向量     对协方差矩阵做特征值分解   V是特征向量
    V1 = V[:,0:k]                 #取前k个特征向量      所有行，取前k列作为特征向量
    V1 = Z.T*V1                  
    for i in np.arange(k):        #对特征向量V1进行归一化
        L = np.linalg.norm(V1[:,i])
        V1[:,i] = V1[:,i]/L
        
    data_new = Z*V1               # 降维后的数据
    return data_new,data_mean,V1  # 降维后的数据，即作为训练已经提取特征向量后的数据 平均脸 ，归一化之后的特征向量V1

### 将每一副图像拉平，降成一维图像
def img_vector(filename):              
    img = sm.imread(filename)
    vector = img.flatten()
    return vector                     # 将图片拉平  现在是 (1,10304)

### 加载图像数据集并选择训练样本个数
def load_data_set(k):  #选择每个人的10副图像中 k 个人作为训练数据   
    global path1
    data_path = path1 +r"\orl"
#    choose = np.random.permutation(10)+1        # 对每个人的10副图像 1 -10 生成一个随机的序列
    choose = [1,2,3,4,5,6,7,8,9,10]
    train_face = np.zeros((40*k,112*92))        # 训练数据矩阵，40*k 行  10304列
    train_face_number = np.zeros(40*k)          # 训练标签
    test_face = np.zeros((40*(10-k),112*92))    # 测试数据矩阵，40*（10-k）行，10304列
    test_face_number = np.zeros(40*(10-k))      # 测试标签
    for i in np.arange(40):                     #40个样本，每个样本10副图像
        people_num = i+1
        for j in np.arange(10):                 #每个人有10副图像
            if j < k:      # 前k个作为训练
                filename = data_path +'\\s'+str(people_num)+'\\'+str(choose[j])+'.pgm'
                img = img_vector(filename)     
                train_face[i*k+j,:] = img
                train_face_number[i*k+j] = people_num
            else:          # 10-k个作为测试
                filename = data_path +'\\s'+str(people_num)+'\\'+str(choose[j])+'.pgm'
                img = img_vector(filename)     
                test_face[i*(10-k)+(j-k),:] = img
                test_face_number[i*(10-k)+(j-k)] = people_num

    return train_face,train_face_number,test_face,test_face_number

# 计算测试数据的正确率
def face_recog(k,m,i): 
    # 得到训练样本和测试样本数据集
    train_face,train_face_label,test_face,test_face_label = load_data_set(k)
    # 用pca训练样本，
    
    data_train_new,data_mean,V = pca(train_face,m)      #训练后降维的训练数据 , m为特征向量的个数
    num_train = data_train_new.shape[0]
    num_test = test_face.shape[0]                    # 40*（10-k）个
    temp_face = test_face - np.tile(data_mean,(num_test,1))    # 对测试人脸的样本进行中心化处理
    data_test_new = temp_face*V                          #得到测试脸在特征向量下的数据
    data_test_new = np.array(data_test_new)              # 测试脸ndarray     (40,19)
    data_train_new = np.array(data_train_new)            # 训练人脸在特征向量下的数据  (360,19)
    
    testFace = data_test_new[i,:]
    diffMat = data_train_new - np.tile(testFace,(num_train,1))
    sqDiffMat = diffMat**2
    sqDistances = sqDiffMat.sum(axis=1)
    sortedDistIndicies = sqDistances.argsort()    # argsort函数返回的是数组值从小到大的索引值
    indexMin = sortedDistIndicies[0:4]
    return indexMin 


if __name__=='__main__':
    root = Tk()
    root.title("人脸识别")
    root.geometry("500x220+400+150")
    path1=os.path.abspath('.')
    main_gui()
    
